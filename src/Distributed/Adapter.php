<?php
/**
 * Created by PhpStorm.
 * User: Garrinar
 * Date: 06.05.2016
 * Time: 12:15
 */

namespace Garrinar\Filesystem\Distributed;

use Illuminate\Support\Collection;
use League\Flysystem\Adapter\Local;
use League\Flysystem\Config;
use SplFileInfo;

/**
 * Class Adapter
 * @package Garrinar\Filesystem\Distributed
 *
 *
 */
class Adapter extends Local
{

    /** @var  Model $model */
    protected $model;

    /** @var  Collection $distributedPathCollection */
    protected $distributedPathCollection;

    public $md5FileName;

    public function __construct($root, $writeFlags, $linkHandling, array $permissions)
    {
        $this->model = new Model($this);
        parent::__construct($root, $writeFlags, $linkHandling, $permissions);
    }


    public function getModel()
    {
        return $this->model;
    }

    public function cleanModel($attributes = [], $exist = false)
    {
        $this->model = $this->model = new Model($this, $attributes);
        return $this;
    }

    public function write($path, $contents, Config $config)
    {
        $this
            ->cleanModel(['path' => $path])
            ->makeDistributedName()
            ->createDistributedPathDirs();

        $file = collect(parent::write($this->getModel()->path, $contents, $config));
        if (!$file->isEmpty()) {
            $this->model->savedFile = $file;
            $this->model->save();
            return $this->getModel();
        }
        return false;
    }

    public function update($path, $contents, Config $config)
    {

        $this
            ->cleanModel(['path' => $path])
            ->makeDistributedName()
            ->createDistributedPathDirs();
        $file = collect(parent::update($this->getModel()->path, $contents, $config));

        if (!$file->isEmpty()) {
            $this->model->savedFile = $file;
            $this->model->save();
            return $this->getModel();
        }
        return false;
    }

    public function rename($path, $newpath)
    {
        return parent::rename($path, $newpath); // TODO: Change the autogenerated stub
    }

    public function copy($path, $newpath)
    {
        return parent::copy($path, $newpath); // TODO: Change the autogenerated stub
    }

    protected function getFilePath(SplFileInfo $file)
    {
        return parent::getFilePath($file); // TODO: Change the autogenerated stub
    }

    protected function makeDistributedName()
    {
        $this->md5FileName = md5($this->getModel()->path . microtime(true));
        $this->getModel()->old_name = $this->getModel()->path;
        $this->distributedPathCollection = collect([
            mb_substr($this->md5FileName, 0, 3),
            mb_substr($this->md5FileName, 3, 3),
            mb_substr($this->md5FileName, 6, 3)
        ]);
        $this->getModel()->name = mb_substr($this->md5FileName, 9);
        $this->getModel()->distributed_path = $this->distributedPathCollection->implode($this->pathSeparator);
        $this->getModel()->path = $this->getModel()->distributed_path . $this->pathSeparator . $this->getModel()->name;
        return $this;
    }

    protected function createDistributedPathDirs()
    {
        $dirPath = '';
        $this
            ->distributedPathCollection
            ->each(function ($prefix) use (&$dirPath) {
                $dirPath .= $this->pathSeparator . $prefix;
                $fullPath = parent::getPathPrefix() . $dirPath;
                if (!is_dir($fullPath)) {
                    @mkdir(parent::getPathPrefix() . $dirPath);
                }
            });
        return $this;
    }

}