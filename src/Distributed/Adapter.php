<?php
/**
 * Created by PhpStorm.
 * User: Garrinar
 * Date: 06.05.2016
 * Time: 12:15
 */

namespace Garrinar\Filesystem\Distributed;

use Garrinar\Filesystem\Distributed\Model;
use Illuminate\Support\Collection;
use League\Flysystem\Adapter\Local;
use League\Flysystem\Config;
use SplFileInfo;

class Adapter extends Local
{


    public function makeDistributedName($filename)
    {
        return mb_substr(md5($filename . microtime(true)), 9);
    }

    /**
     * @param $distributedFilename
     * @return Collection
     */
    public function getDistributedPathPrefixCollection($distributedFilename)
    {
        return collect([
            mb_substr($distributedFilename, 0, 3),
            mb_substr($distributedFilename, 3, 3),
            mb_substr($distributedFilename, 6, 3),
        ]);
    }

    public function createDistributedPathDirs(Collection $prefixes)
    {
        $dirPath = '';
        $prefixes->each(function ($prefix) use (&$dirPath) {
            $dirPath .= $this->pathSeparator . $prefix;
            $fullPath = parent::getPathPrefix() . $dirPath;
            if (!is_dir($fullPath)) {
                @mkdir(parent::getPathPrefix() . $dirPath);
            }
        });
    }

    public function applyDistributedPathPrefix(Collection $prefixes, $fileName)
    {
        return
            $this->pathSeparator .
            $prefixes
                ->push($fileName)
                ->implode($this->pathSeparator);

    }

    public function write($path, $contents, Config $config)
    {
        /** @var Adapter $file */
        $oldName = $path;
        $newName = $this->makeDistributedName($oldName);

        $distributedPathPrefixes = $this->getDistributedPathPrefixCollection($newName);
        $distributedPath = $this->pathSeparator.$distributedPathPrefixes->implode($this->pathSeparator).$this->pathSeparator;
        $this->createDistributedPathDirs($distributedPathPrefixes);

        $path = $this->applyDistributedPathPrefix($distributedPathPrefixes, $newName);

        $file = parent::write($path, $contents, $config);
        if (is_array($file)) {
            $file['name'] = $newName;
            $file['path'] = $path;
            $file['old_name'] = $oldName;
            $file['distributed_path'] = $distributedPath;
            $model = new Model(collect($file)->only([
                'path',
                'name',
                'old_name',
                'distributed_path'
            ])->toArray());
            $model->save();
            return $file;
        }
        return false;
    }

    public function update($path, $contents, Config $config)
    {
        return parent::update($path, $contents, $config); // TODO: Change the autogenerated stub
    }

    public function rename($path, $newpath)
    {
        return parent::rename($path, $newpath); // TODO: Change the autogenerated stub
    }

    public function copy($path, $newpath)
    {
        return parent::copy($path, $newpath); // TODO: Change the autogenerated stub
    }

    protected function getFilePath(SplFileInfo $file)
    {
        return parent::getFilePath($file); // TODO: Change the autogenerated stub
    }


}