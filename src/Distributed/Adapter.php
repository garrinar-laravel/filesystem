<?php
/**
 * Created by PhpStorm.
 * User: Garrinar
 * Date: 06.05.2016
 * Time: 12:15
 */

namespace Garrinar\Filesystem\Distributed;

use Illuminate\Support\Collection;
use League\Flysystem\Adapter\Local;
use League\Flysystem\Config;
use SplFileInfo;

class Adapter extends Local
{

    /**
     * @param $filename
     * @return \Illuminate\Support\Collection
     */
    public function getDistributedPathPrefix($filename)
    {
        $md5FileName = md5($filename.microtime(true));
        $prefixes = collect([
            mb_substr($md5FileName, 0, 3),
            mb_substr($md5FileName, 3, 3),
            mb_substr($md5FileName, 6, 3),
        ]);
        return $prefixes;
    }

    public function createDistributedPathDirs(Collection $prefixes)
    {
        $dirPath = '';
        $prefixes->each(function($prefix) use (&$dirPath) {
            $dirPath .= $this->pathSeparator.$prefix;
            $fullPath = parent::getPathPrefix().$dirPath;
            if(!is_dir($fullPath)) {
                @mkdir(parent::getPathPrefix() . $dirPath);
            }
        });
    }

    public function write($path, $contents, Config $config)
    {
        /** @var Adapter $file */
        $oldName = $path;
        $distributedPathPrefixes = $this->getDistributedPathPrefix($oldName);
        $this->createDistributedPathDirs($distributedPathPrefixes);
        $file = parent::write($path, $contents, $config);
        if(is_array($file)) {
            $file['name'] = $file['path'];
            $file['path'] = $distributedPathPrefixes->implode($this->pathSeparator).$this->pathSeparator;
            $file['old_name'] = $oldName;
            return $file;
        }
        return false;
    }

    public function update($path, $contents, Config $config)
    {
        return parent::update($path, $contents, $config); // TODO: Change the autogenerated stub
    }

    public function rename($path, $newpath)
    {
        return parent::rename($path, $newpath); // TODO: Change the autogenerated stub
    }

    public function copy($path, $newpath)
    {
        return parent::copy($path, $newpath); // TODO: Change the autogenerated stub
    }

    protected function getFilePath(SplFileInfo $file)
    {
        return parent::getFilePath($file); // TODO: Change the autogenerated stub
    }


}